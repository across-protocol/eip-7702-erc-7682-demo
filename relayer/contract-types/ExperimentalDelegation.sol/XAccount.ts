import type { FunctionFragment, Result } from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  OnEvent,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from '../common'

export type AssetStruct = { token: string; amount: BigNumberish }

export type AssetStructOutput = [string, BigNumber] & {
  token: string
  amount: BigNumber
}

export type CallStruct = {
  target: string
  callData: BytesLike
  value: BigNumberish
}

export type CallStructOutput = [string, string, BigNumber] & {
  target: string
  callData: string
  value: BigNumber
}

export type CallByUserStruct = {
  user: string
  nonce: BigNumberish
  asset: AssetStruct
  chainId: BigNumberish
  signature: BytesLike
  calls: CallStruct[]
}

export type CallByUserStructOutput = [
  string,
  BigNumber,
  AssetStructOutput,
  BigNumber,
  string,
  CallStructOutput[],
] & {
  user: string
  nonce: BigNumber
  asset: AssetStructOutput
  chainId: BigNumber
  signature: string
  calls: CallStructOutput[]
}

export interface XAccountInterface extends utils.Interface {
  functions: {
    'DESTINATION_SETTLER()': FunctionFragment
    'xExecute((address,uint256,(address,uint256),uint64,bytes,(address,bytes,uint256)[]))': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic: 'DESTINATION_SETTLER' | 'xExecute',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'DESTINATION_SETTLER',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'xExecute',
    values: [CallByUserStruct],
  ): string

  decodeFunctionResult(
    functionFragment: 'DESTINATION_SETTLER',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'xExecute', data: BytesLike): Result

  events: {}
}

export interface XAccount extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: XAccountInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    DESTINATION_SETTLER(overrides?: CallOverrides): Promise<[string]>

    xExecute(
      userCalls: CallByUserStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>
  }

  DESTINATION_SETTLER(overrides?: CallOverrides): Promise<string>

  xExecute(
    userCalls: CallByUserStruct,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>

  callStatic: {
    DESTINATION_SETTLER(overrides?: CallOverrides): Promise<string>

    xExecute(
      userCalls: CallByUserStruct,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {}

  estimateGas: {
    DESTINATION_SETTLER(overrides?: CallOverrides): Promise<BigNumber>

    xExecute(
      userCalls: CallByUserStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    DESTINATION_SETTLER(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    xExecute(
      userCalls: CallByUserStruct,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>
  }
}
