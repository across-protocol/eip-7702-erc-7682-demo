/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export type AssetStruct = { token: string; amount: BigNumberish };

export type AssetStructOutput = [string, BigNumber] & {
  token: string;
  amount: BigNumber;
};

export type CallStruct = {
  target: string;
  callData: BytesLike;
  value: BigNumberish;
};

export type CallStructOutput = [string, string, BigNumber] & {
  target: string;
  callData: string;
  value: BigNumber;
};

export type CallByUserStruct = {
  user: string;
  nonce: BigNumberish;
  asset: AssetStruct;
  chainId: BigNumberish;
  signature: BytesLike;
  calls: CallStruct[];
};

export type CallByUserStructOutput = [
  string,
  BigNumber,
  AssetStructOutput,
  BigNumber,
  string,
  CallStructOutput[]
] & {
  user: string;
  nonce: BigNumber;
  asset: AssetStructOutput;
  chainId: BigNumber;
  signature: string;
  calls: CallStructOutput[];
};

export type AuthorizationStruct = {
  chainId: BigNumberish;
  codeAddress: string;
  nonce: BigNumberish;
  signature: BytesLike;
};

export type AuthorizationStructOutput = [
  BigNumber,
  string,
  BigNumber,
  string
] & {
  chainId: BigNumber;
  codeAddress: string;
  nonce: BigNumber;
  signature: string;
};

export type EIP7702AuthDataStruct = { authlist: AuthorizationStruct[] };

export type EIP7702AuthDataStructOutput = [AuthorizationStructOutput[]] & {
  authlist: AuthorizationStructOutput[];
};

export type OnchainCrossChainOrderStruct = {
  fillDeadline: BigNumberish;
  orderDataType: BytesLike;
  orderData: BytesLike;
};

export type OnchainCrossChainOrderStructOutput = [number, string, string] & {
  fillDeadline: number;
  orderDataType: string;
  orderData: string;
};

export type GaslessCrossChainOrderStruct = {
  originSettler: string;
  user: string;
  nonce: BigNumberish;
  originChainId: BigNumberish;
  openDeadline: BigNumberish;
  fillDeadline: BigNumberish;
  orderDataType: BytesLike;
  orderData: BytesLike;
};

export type GaslessCrossChainOrderStructOutput = [
  string,
  string,
  BigNumber,
  BigNumber,
  number,
  number,
  string,
  string
] & {
  originSettler: string;
  user: string;
  nonce: BigNumber;
  originChainId: BigNumber;
  openDeadline: number;
  fillDeadline: number;
  orderDataType: string;
  orderData: string;
};

export type OutputStruct = {
  token: BytesLike;
  amount: BigNumberish;
  recipient: BytesLike;
  chainId: BigNumberish;
};

export type OutputStructOutput = [string, BigNumber, string, BigNumber] & {
  token: string;
  amount: BigNumber;
  recipient: string;
  chainId: BigNumber;
};

export type FillInstructionStruct = {
  destinationChainId: BigNumberish;
  destinationSettler: BytesLike;
  originData: BytesLike;
};

export type FillInstructionStructOutput = [BigNumber, string, string] & {
  destinationChainId: BigNumber;
  destinationSettler: string;
  originData: string;
};

export type ResolvedCrossChainOrderStruct = {
  user: string;
  originChainId: BigNumberish;
  openDeadline: BigNumberish;
  fillDeadline: BigNumberish;
  orderId: BytesLike;
  maxSpent: OutputStruct[];
  minReceived: OutputStruct[];
  fillInstructions: FillInstructionStruct[];
};

export type ResolvedCrossChainOrderStructOutput = [
  string,
  BigNumber,
  number,
  number,
  string,
  OutputStructOutput[],
  OutputStructOutput[],
  FillInstructionStructOutput[]
] & {
  user: string;
  originChainId: BigNumber;
  openDeadline: number;
  fillDeadline: number;
  orderId: string;
  maxSpent: OutputStructOutput[];
  minReceived: OutputStructOutput[];
  fillInstructions: FillInstructionStructOutput[];
};

export interface OriginSettlerInterface extends utils.Interface {
  functions: {
    "PERMIT2()": FunctionFragment;
    "decode7683OrderData(bytes)": FunctionFragment;
    "open((uint32,bytes32,bytes))": FunctionFragment;
    "openFor((address,address,uint256,uint256,uint32,uint32,bytes32,bytes),bytes,bytes)": FunctionFragment;
    "pendingOrders(bytes32)": FunctionFragment;
    "repayFiller(bytes32,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PERMIT2"
      | "decode7683OrderData"
      | "open"
      | "openFor"
      | "pendingOrders"
      | "repayFiller"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PERMIT2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decode7683OrderData",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [OnchainCrossChainOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "openFor",
    values: [GaslessCrossChainOrderStruct, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOrders",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFiller",
    values: [BytesLike, string, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "PERMIT2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decode7683OrderData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "repayFiller",
    data: BytesLike
  ): Result;

  events: {
    "Open(bytes32,(address,uint256,uint32,uint32,bytes32,(bytes32,uint256,bytes32,uint256)[],(bytes32,uint256,bytes32,uint256)[],(uint64,bytes32,bytes)[]))": EventFragment;
    "Requested7702Delegation(((uint256,address,uint256,bytes)[]))": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Requested7702Delegation"): EventFragment;
}

export interface OpenEventObject {
  orderId: string;
  resolvedOrder: ResolvedCrossChainOrderStructOutput;
}
export type OpenEvent = TypedEvent<
  [string, ResolvedCrossChainOrderStructOutput],
  OpenEventObject
>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface Requested7702DelegationEventObject {
  authData: EIP7702AuthDataStructOutput;
}
export type Requested7702DelegationEvent = TypedEvent<
  [EIP7702AuthDataStructOutput],
  Requested7702DelegationEventObject
>;

export type Requested7702DelegationEventFilter =
  TypedEventFilter<Requested7702DelegationEvent>;

export interface OriginSettler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: OriginSettlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PERMIT2(overrides?: CallOverrides): Promise<[string]>;

    decode7683OrderData(
      orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        CallByUserStructOutput,
        EIP7702AuthDataStructOutput,
        AssetStructOutput
      ] & {
        calls: CallByUserStructOutput;
        authData: EIP7702AuthDataStructOutput;
        asset: AssetStructOutput;
      }
    >;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      permit2Signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    pendingOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    repayFiller(
      orderId: BytesLike,
      filler: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  PERMIT2(overrides?: CallOverrides): Promise<string>;

  decode7683OrderData(
    orderData: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [CallByUserStructOutput, EIP7702AuthDataStructOutput, AssetStructOutput] & {
      calls: CallByUserStructOutput;
      authData: EIP7702AuthDataStructOutput;
      asset: AssetStructOutput;
    }
  >;

  open(
    order: OnchainCrossChainOrderStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  openFor(
    order: GaslessCrossChainOrderStruct,
    permit2Signature: BytesLike,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  pendingOrders(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

  repayFiller(
    orderId: BytesLike,
    filler: string,
    proof: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    PERMIT2(overrides?: CallOverrides): Promise<string>;

    decode7683OrderData(
      orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        CallByUserStructOutput,
        EIP7702AuthDataStructOutput,
        AssetStructOutput
      ] & {
        calls: CallByUserStructOutput;
        authData: EIP7702AuthDataStructOutput;
        asset: AssetStructOutput;
      }
    >;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      permit2Signature: BytesLike,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    pendingOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { token: string; amount: BigNumber }>;

    repayFiller(
      orderId: BytesLike,
      filler: string,
      proof: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Open(bytes32,(address,uint256,uint32,uint32,bytes32,(bytes32,uint256,bytes32,uint256)[],(bytes32,uint256,bytes32,uint256)[],(uint64,bytes32,bytes)[]))"(
      orderId?: BytesLike | null,
      resolvedOrder?: null
    ): OpenEventFilter;
    Open(orderId?: BytesLike | null, resolvedOrder?: null): OpenEventFilter;

    "Requested7702Delegation(((uint256,address,uint256,bytes)[]))"(
      authData?: null
    ): Requested7702DelegationEventFilter;
    Requested7702Delegation(
      authData?: null
    ): Requested7702DelegationEventFilter;
  };

  estimateGas: {
    PERMIT2(overrides?: CallOverrides): Promise<BigNumber>;

    decode7683OrderData(
      orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      permit2Signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    pendingOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayFiller(
      orderId: BytesLike,
      filler: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PERMIT2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decode7683OrderData(
      orderData: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    open(
      order: OnchainCrossChainOrderStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    openFor(
      order: GaslessCrossChainOrderStruct,
      permit2Signature: BytesLike,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    pendingOrders(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    repayFiller(
      orderId: BytesLike,
      filler: string,
      proof: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
